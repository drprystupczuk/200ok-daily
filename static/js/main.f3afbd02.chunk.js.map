{"version":3,"sources":["components/list/index.js","components/randomList/index.js","App.js","reportWebVitals.js","index.js"],"names":["ListComponent","props","Fragment","class","names","map","name","index","type","onChange","change","defaultChecked","RandomListComponent","sortedNames","App","useState","clicked","setClicked","setNames","setSortedNames","inputNames","useRef","cmdShuffle","selectedNames","randomIndex","currentIndex","length","Math","floor","random","useEffect","console","log","className","href","target","rel","pattern","placeholder","ref","onClick","current","value","newParticipant","concat","position","newNames","filter","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3afbd02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style.css';\r\n\r\nexport default function ListComponent(props) {\r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <h2>Participantes daily:</h2>\r\n         {\r\n            (<ul class=\"customList\"> {props.names && props.names.map((name, index) => \r\n            <li key={index}> \r\n               <label class=\"container\"> {name[0]} \r\n                  <input \r\n                     type=\"checkbox\" \r\n                     onChange={() => props.change(index)} \r\n                     defaultChecked={name[1] && true}>   \r\n                  </input>\r\n                  <span class=\"checkmark\"></span>\r\n               </label>\r\n               \r\n            </li>)}\r\n            </ul>)\r\n         }\r\n\r\n      </React.Fragment> \r\n   );\r\n}","import React from \"react\";\r\n\r\nexport default function RandomListComponent (props){\r\n   return (\r\n      <React.Fragment>\r\n         <h2>Orden  daily:</h2>\r\n         {\r\n            (<ol> {props.sortedNames && \r\n               props.sortedNames.map((name, index) => name[1] ? <li key={index}>{ name[1] && name[0] }</li> : '' )}\r\n            </ol>)   \r\n         }\r\n\r\n      </React.Fragment>\r\n   );\r\n}","import './App.css';\nimport { useRef, useState, useEffect } from 'react';\nimport ListComponent from './components/list';\nimport RandomListComponent from './components/randomList';\n\nfunction App() {\n\n  let [clicked, setClicked] = useState(false);\n  let [names, setNames] = useState(\n  [\n    [\"Prystu\", true],\n    [\"Augusto\", true],\n    [\"Ariel\", true],\n    [\"Agus\", true], \n    [\"Paula\", true], \n    [\"Rodri\", true], \n    [\"Stepan\", true],\n    [\"Cristian\", true],\n    [\"Fede\", true],\n    [\"Eze\", true], \n    [\"Jose\", true], \n    [\"Diego Farfan\", true], \n    [\"German\", true]\n  ]);\n\n  let [sortedNames, setSortedNames] = useState(null);\n\n  const inputNames = useRef('');\n\n  const getBest = () => {\n    return names[0];\n  }\n\n  const handleOnChange = (position) => {\n    if(position != null){\n      const newNames = [...names];\n      newNames[position] =  [names[position][0], !names[position][1]];\n      setNames(newNames);\n    }\n   }\n\n   const cmdSort = () => {\n    let selectedNames = names.filter(name => name[1] == true);\n    \n     if((!sortedNames || !clicked) && selectedNames.length){\n      setClicked(true);\n      cmdShuffle(selectedNames);\n     }\n  }\n\n  const cmdShuffle = (selectedNames) => {\n\n    \n    let currentIndex = selectedNames.length,  randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [selectedNames[currentIndex], selectedNames[randomIndex]] = [selectedNames[randomIndex], selectedNames[currentIndex]];\n    }\n    setSortedNames(selectedNames);\n  }\n\n  \n  const cmdAdd = () => {\n    if(inputNames.current.value != ''){\n      var newParticipant = [[inputNames.current.value, true]];\n      inputNames.current.value = '';\n      setNames(names => names.concat(newParticipant));\n    }\n  }\n\n  useEffect(()=>{\n    console.log('useEffect', names);\n  }, [names]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p> DAILY - Goalsetter </p>\n        <a\n          className=\"App-link\"\n          href=\"https://goalsetter.co\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          200OK Team\n        </a>\n        {/* <h3>El mejor del equipo es:</h3> {getBest(names)} */}\n\n        { !clicked && <h3>Agregar participantes</h3>}\n        \n        \n        { !clicked && \n          <input \n            type=\"text\" \n            pattern=\"[0-9]*\"\n            placeholder=\"Ingrese nombre\" \n            ref={inputNames} >\n          </input>}\n        <br></br>\n        \n        { !clicked && <button onClick={cmdAdd}> Agregar</button>}\n\n        { !clicked && <ListComponent names={names} change={handleOnChange}></ListComponent> }\n        \n        { (names.filter(name => name[1] == true).length < 2) && <span className='warning'>Debe seleccionar al menos dos participantes</span>}\n        \n        { !clicked && (<button disabled={names.filter(name => name[1] == true).length < 2} onClick={cmdSort}> Sortear</button>)}\n        \n        { clicked && !!sortedNames && <RandomListComponent sortedNames={sortedNames}></RandomListComponent> }\n        \n        { !!sortedNames && clicked && <button onClick={() => setClicked(false)}> Volver</button>}\n      \n        <br></br>\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}