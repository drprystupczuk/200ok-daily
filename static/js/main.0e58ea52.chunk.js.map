{"version":3,"sources":["components/list/index.js","components/randomList/index.js","App.js","reportWebVitals.js","index.js"],"names":["ListComponent","props","Fragment","class","names","map","name","index","type","onChange","change","defaultChecked","RandomListComponent","Date","getDay","sortedNames","App","useState","clicked","setClicked","setNames","setSortedNames","inputNames","useRef","cmdShuffle","selectedNames","randomIndex","currentIndex","length","Math","floor","random","useEffect","console","log","className","href","target","rel","pattern","placeholder","ref","onClick","current","value","newParticipant","concat","position","newNames","filter","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e58ea52.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style.css';\r\n\r\nexport default function ListComponent(props) {\r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <h2>üëã Participantes daily:</h2>\r\n         {\r\n            (<ul class=\"customList\"> {props.names && props.names.map((name, index) => \r\n            <li key={index}> \r\n               <label class=\"container\"> {name[0]} \r\n                  <input \r\n                     type=\"checkbox\" \r\n                     onChange={() => props.change(index)} \r\n                     defaultChecked={name[1] && true}>   \r\n                  </input>\r\n                  <span class=\"checkmark\"></span>\r\n               </label>\r\n               \r\n            </li>)}\r\n            </ul>)\r\n         }\r\n\r\n      </React.Fragment> \r\n   );\r\n}","import React from \"react\";\r\n\r\nexport default function RandomListComponent (props){\r\n   const getCurrentDay =() => {\r\n      const dayNames = [\r\n         \"Domingo\",\r\n         \"Lunes üåßüò≠\",\r\n         \"Martes üí™‚ö°\",\r\n         \"Mi√©rcoles üßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏è\",\r\n         \"Jueves ü•±üò´\",\r\n         \"Viernes üéâü•≥\",\r\n         \"Sabado\"\r\n      ];\r\n      return dayNames[new Date().getDay()]\r\n   };\r\n   return (\r\n      <React.Fragment>\r\n         <h2> üññüëâLista daily {getCurrentDay()}</h2>\r\n         {\r\n            (<ol> {props.sortedNames && \r\n               props.sortedNames.map((name, index) => name[1] ? <li key={index}>{ name[1] && name[0] }</li> : '' )}\r\n            </ol>)   \r\n         }\r\n\r\n      </React.Fragment>\r\n   );\r\n}","import './App.css';\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport ListComponent from './components/list';\r\nimport RandomListComponent from './components/randomList';\r\n\r\nfunction App() {\r\n\r\n  let [clicked, setClicked] = useState(false);\r\n  let [names, setNames] = useState(\r\n  [\r\n    [\" üíØ Prystu üòé\", true],\r\n    [\" üîô Valen\", true],\r\n    [\" üîô Augusto\", true],\r\n    [\" üîô Ariel\", true],\r\n    [\" üîô Fede\", true],\r\n    [\" üî® Agus\",  true],\r\n    [\" üëÅ‚Äçüó® Nico\",     true],\r\n    [\" üëÅ‚Äçüó® Cristian\", true],\r\n    [\" üëÅ‚Äçüó® German\", true],\r\n    [\" üì±  Stepan\",  true],\r\n    [\" üì±  Eze\", true],\r\n    [\" üìä Lean\", true],\r\n    [\" üëÅ‚Äçüó® Diego\", false], \r\n    [\" üëÅ‚Äçüó® Ana\",     false], \r\n    [\" üëÅ‚Äçüó® Paula\",   false], \r\n    [\" üé® Jose\", false]\r\n  ]);\r\n\r\n  let [sortedNames, setSortedNames] = useState(null);\r\n\r\n  const inputNames = useRef('');\r\n\r\n  const getBest = () => {\r\n    return names[0];\r\n  }\r\n\r\n  const handleOnChange = (position) => {\r\n    if(position != null){\r\n      const newNames = [...names];\r\n      newNames[position] =  [names[position][0], !names[position][1]];\r\n      setNames(newNames);\r\n    }\r\n   }\r\n\r\n   const cmdSort = () => {\r\n    let selectedNames = names.filter(name => name[1] == true);\r\n    \r\n     if((!sortedNames || !clicked) && selectedNames.length){\r\n      setClicked(true);\r\n      cmdShuffle(selectedNames);\r\n     }\r\n  }\r\n\r\n  const cmdShuffle = (selectedNames) => {\r\n\r\n    \r\n    let currentIndex = selectedNames.length,  randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex != 0) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [selectedNames[currentIndex], selectedNames[randomIndex]] = [selectedNames[randomIndex], selectedNames[currentIndex]];\r\n    }\r\n    setSortedNames(selectedNames);\r\n  }\r\n\r\n  \r\n  const cmdAdd = () => {\r\n    if(inputNames.current.value != ''){\r\n      var newParticipant = [[inputNames.current.value, true]];\r\n      inputNames.current.value = '';\r\n      setNames(names => names.concat(newParticipant));\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('useEffect', names);\r\n  }, [names]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p> DAILY - Goalsetter </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://goalsetter.co\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          200OK Team\r\n        </a>\r\n        {/* <h3>El mejor del equipo es:</h3> {getBest(names)} */}\r\n\r\n        { !clicked && <h3>Agregar participantes</h3>}\r\n        \r\n        \r\n        { !clicked && \r\n          <input \r\n            type=\"text\" \r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"Ingrese nombre\" \r\n            ref={inputNames} >\r\n          </input>}\r\n        <br></br>\r\n        \r\n        { !clicked && <button onClick={cmdAdd}> Agregar</button>}\r\n\r\n        { !clicked && <ListComponent names={names} change={handleOnChange}></ListComponent> }\r\n        \r\n        { (names.filter(name => name[1] == true).length < 2) && <span className='warning'>Debe seleccionar al menos dos participantes</span>}\r\n        \r\n        { !clicked && (<button disabled={names.filter(name => name[1] == true).length < 2} onClick={cmdSort}> Sortear</button>)}\r\n        \r\n        { clicked && !!sortedNames && <RandomListComponent sortedNames={sortedNames}></RandomListComponent> }\r\n        \r\n        { !!sortedNames && clicked && <button onClick={() => setClicked(false)}> Volver</button>}\r\n      \r\n        <br></br>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}